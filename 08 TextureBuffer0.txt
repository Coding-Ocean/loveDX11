=================================================================================================
テクスチャ座標

ヘッダ
ID3D11Buffer* TexcoordBuffer;

リソース
        //頂点バッファ-texcoords
        {
            //４角形の頂点テクスチャ座標データを用意
            XMFLOAT2 texcoords[] = {
                { 0.0f, 1.0f },
                { 1.0f, 1.0f },
                { 0.0f, 0.0f },
                { 1.0f, 0.0f },
            };
            //バッファ記述
            D3D11_BUFFER_DESC desc{};
            desc.ByteWidth = sizeof(XMFLOAT2) * _countof(texcoords);//配列の全長
            desc.Usage = D3D11_USAGE_DEFAULT;            //デフォルトアクセス
            desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;   //頂点バッファとしてGPUに紐づけ
            desc.CPUAccessFlags = 0;                     //CPUのバッファへのアクセス拒否
            //データの設定
            D3D11_SUBRESOURCE_DATA data{};
            data.pSysMem = texcoords;
            //バッファを作成
            Hr = Device->CreateBuffer(&desc, &data, &TexcoordBuffer);
            assert(SUCCEEDED(Hr));
        }

パイプライン
            頂点インプットレイアウトのエレメントに追加する
            UINT slot1 = 1;

            {"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, slot1, 0, D3D11_INPUT_PER_VERTEX_DATA, 0},

メインループ
            //頂点バッファをまとめてからセット
            ID3D11Buffer* buffers[] = { PositionBuffer, TexcoordBuffer };
            UINT stride[2] = { sizeof(XMFLOAT3),sizeof(XMFLOAT2) };
            UINT offset[2] = { 0,0 };
            Context->IASetVertexBuffers(0, 2, buffers, stride, offset);

解放
        TexcoordBuffer->Release();

=================================================================================================
テクスチャバッファ

ヘッダ
ID3D11ShaderResourceView*   TextureBufferView0;
 
リソース
        //テクスチャバッファ0
        {
            //テクスチャデータを自分でつくる
            UINT texWidth = 25;
            UINT texHeight = 25;
            UINT c = texWidth / 2;
            struct pixel { unsigned char r, g, b, a; };
            pixel* pixels = new pixel[texWidth * texHeight];
            for (UINT y = 0; y < texHeight; y++) {
                for (UINT x = 0; x < texWidth; x++) {
                    if ( (x + y) % 2 ) {
                        pixels[x + y * texWidth] = {255,255,0,255};
                    }
                    else {
                        pixels[x + y * texWidth] = {0,128,255,255};
                    }
                }
            }

            //テクスチャバッファ記述
            D3D11_TEXTURE2D_DESC desc{};
            desc.Width = texWidth;
            desc.Height = texHeight;
            desc.MipLevels = 1;
            desc.ArraySize = 1;
            desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
            desc.SampleDesc.Count = 1;
            desc.SampleDesc.Quality = 0;
            desc.Usage = D3D11_USAGE_IMMUTABLE;
            desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
            desc.CPUAccessFlags = 0;
            desc.MiscFlags = 0;
            //テクスチャデータ
            D3D11_SUBRESOURCE_DATA data{};
            data.pSysMem = (void*)pixels;
            data.SysMemPitch = texWidth * 4;
            data.SysMemSlicePitch = texWidth * texHeight * 4;
            //バッファをつくる
            ID3D11Texture2D* textureBuffer = nullptr;
            Hr = Device->CreateTexture2D(&desc, &data, &textureBuffer);
            assert(SUCCEEDED(Hr));

            //テクスチャバッファのビューをつくる
            Hr = Device->CreateShaderResourceView(textureBuffer, nullptr, &TextureBufferView0);
            assert(SUCCEEDED(Hr));

            //解放
            textureBuffer->Release();
            delete[] pixels;
        }


パイプライン
        //サンプラステート
        {
            D3D11_SAMPLER_DESC desc = {};
            desc.Filter = D3D11_FILTER_MIN_MAG_MIP_POINT;
            //desc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
            desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
            desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
            desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
            desc.ComparisonFunc = D3D11_COMPARISON_NEVER;
            desc.MinLOD = 0;
            desc.MaxLOD = D3D11_FLOAT32_MAX;
            Hr = Device->CreateSamplerState(&desc, &SamplerState);
        }


メインループ
            //テクスチャセット
            UINT t0 = 0; 
            Context->PSSetShaderResources(t0, 1, &TextureBufferView0);

解放
        TextureBufferView0->Release();

